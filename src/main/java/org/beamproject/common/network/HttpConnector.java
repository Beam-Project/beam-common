/*
 * Copyright (C) 2013, 2014 beamproject.org
 *
 * This file is part of beam-common.
 *
 * beam-common is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * beam-common is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package org.beamproject.common.network;

import java.io.BufferedReader;
import java.io.DataOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.URLEncoder;
import org.apache.http.HttpStatus;
import org.beamproject.common.crypto.CryptoPacker;
import org.beamproject.common.util.Base64;
import org.beamproject.common.util.Exceptions;

/**
 * Provides the possibility to send HTTP POST requests to a web server.
 */
public class HttpConnector {

    public final static String USER_AGENT = "Beam";
    public final static String ENCODING = "UTF-8";
    private final String VALUE_PARAMETER_NAME = "value";
    private HttpURLConnection connection;
    URL recipientUrl;

    /**
     * Prepares for a new HTTP connection to the server behind the given URL.
     * The connection is set up when it's needed for the first time. Internally,
     * a connection pool is used.
     *
     * @param recipientUrl The URL of the recipients host.
     * @throws IllegalArgumentException If the argument is null, empty or not a
     * valid {@link URL}.
     */
    public HttpConnector(URL recipientUrl) {
        Exceptions.verifyArgumentsNotNull(recipientUrl);

        this.recipientUrl = recipientUrl;
    }

    /**
     * Sends the given {@code content} to the configured server. It is expected
     * that the bytes were created with {@link CryptoPacker}. Otherwise, the
     * server might reject the request.<p>
     * The content is sent as value of the parameter named {@code value}
     * (therefore it's {@link Base64}ed and then {@link URLEncoder}ed). This is
     * automatically done, so the argument should be exactly the output
     * generated by {@link CryptoPacker}!
     *
     * @param content The data to send.
     * @return The response sent by the server.
     * @throws IllegalArgumentException If the argument is null or empty (zero
     * length).
     */
    public byte[] excutePost(byte[] content) {
        if (content == null || content.length == 0) {
            throw new IllegalArgumentException("The argument may not be null nor may it be empty.");
        }

        try {
            openConnection(content.length);
            sendRequest(content);
            return readResponse();
        } catch (IOException ex) {
            throw new NetworkException("An error occurred during sending or "
                    + "requesting data to respective from a HTTP server: " + ex.getMessage());
        }
    }

    private void openConnection(int contentLength) throws IOException {
        connection = (HttpURLConnection) recipientUrl.openConnection();
        connection.setRequestMethod("POST");
        connection.setRequestProperty("Content-Type", "application/x-www-form-urlencoded");
        connection.setRequestProperty("Content-Length", "" + Integer.toString(contentLength));
        connection.setRequestProperty("Content-Language", "en-US");
        connection.setRequestProperty("User-Agent", USER_AGENT);
        connection.setDoInput(true);
        connection.setDoOutput(true);
    }

    private void sendRequest(byte[] content) throws IOException {
        try (DataOutputStream requestStream = new DataOutputStream(connection.getOutputStream())) {
            requestStream.writeBytes(VALUE_PARAMETER_NAME + "=");
            requestStream.writeBytes(URLEncoder.encode(Base64.encode(content), ENCODING));
            requestStream.flush();
        }
    }

    private byte[] readResponse() throws IOException {
        StringBuffer response;
        InputStream input
                = connection.getResponseCode() >= HttpStatus.SC_BAD_REQUEST
                ? connection.getErrorStream()
                : connection.getInputStream();

        try (BufferedReader responseReader = new BufferedReader(new InputStreamReader(input))) {
            String line;
            response = new StringBuffer();

            while ((line = responseReader.readLine()) != null) {
                response.append(line);
                response.append('\n');
            }
        }

        return response.toString().getBytes();
    }
}
